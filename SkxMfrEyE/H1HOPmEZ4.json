{"_id":"H1HOPmEZ4","title":"Reusing variable","body":{"blocks":[{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"ag6qs","text":"Reusing variable","type":"header-one"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"1cmhp","text":"Suppose we want to build two layers for a neural network","type":"header-two"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"51c0e","text":"def conv_relu(input, kernel_shape, bias_shape):\n    # Create variable named \"weights\".\n    weights = tf.get_variable(\"weights\", kernel_shape,\n        initializer=tf.random_normal_initializer())\n    # Create variable named \"biases\".\n    biases = tf.get_variable(\"biases\", bias_shape,\n        initializer=tf.constant_initializer(0.0))\n    conv = tf.nn.conv2d(input, weights,\n        strides=[1, 1, 1, 1], padding='SAME')\n    return tf.nn.relu(conv + biases)","type":"custom-code-block-python"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"59kd9","text":"This is neural network function, if we want to build many layers, calling this function repeatedly won't work","type":"header-two"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"9vn1q","text":"we cannot do this","type":"header-two"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"b94mt","text":"input1 = tf.random_normal([1,10,10,32])\ninput2 = tf.random_normal([1,20,20,32])\nx = conv_relu(input1, kernel_shape=[5, 5, 32, 32], bias_shape=[32])\nx = conv_relu(x, kernel_shape=[5, 5, 32, 32], bias_shape = [32])","type":"custom-code-block-python"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"8d272","text":"we need to do following ways:","type":"header-two"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"3v2e1","text":"def my_image_filter(input_images):\n    with tf.variable_scope(\"conv1\"):\n        # Variables created here will be named \"conv1/weights\", \"conv1/biases\".\n        relu1 = conv_relu(input_images, [5, 5, 32, 32], [32])\n    with tf.variable_scope(\"conv2\"):\n        # Variables created here will be named \"conv2/weights\", \"conv2/biases\".\n        return conv_relu(relu1, [5, 5, 32, 32], [32])\n","type":"custom-code-block-python"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"954jp","text":" Variables created here will be named \"conv1/weights\", \"conv1/biases\"   ","type":"header-two"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"cjrnr","text":"NOTE -- Only variables created within scope will be named with scope name before","type":"header-one"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"e4osn","text":"Variables created here will be named \"conv2/weights\", \"conv2/biases\"","type":"header-two"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"r4jt","text":"Respectively","type":"header-two"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"9bbup","text":"","type":"unstyled"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"99v5b","text":"    or","type":"header-two"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"e48q7","text":"If you do want the variables to be shared, you have two options. First, you can create a scope with the same name using reuse=True:","type":"header-two"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"93i9d","text":"with tf.variable_scope(\"model\"):\n  output1 = my_image_filter(input1)\nwith tf.variable_scope(\"model\", reuse=True):\n  output2 = my_image_filter(input2)\n","type":"custom-code-block-python"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"4mcn7","text":"  or","type":"header-two"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"e2d7i","text":"You can also call scope.reuse_variables() to trigger a reuse:","type":"header-two"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"34r3u","text":"with tf.variable_scope(\"model\") as scope:\n  output1 = my_image_filter(input1)\n  scope.reuse_variables()\n  output2 = my_image_filter(input2)\n","type":"custom-code-block-python"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"34ace","text":"  or","type":"header-two"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"f8h8e","text":"Since depending on exact string names of scopes can feel dangerous, it's also possible to initialize a variable scope based on another one:","type":"header-two"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"q55b","text":"with tf.variable_scope(\"model\") as scope:\n  output1 = my_image_filter(input1)\nwith tf.variable_scope(scope, reuse=True):\n  output2 = my_image_filter(input2)\n","type":"custom-code-block-python"}],"entityMap":{}},"dateCreated":"2018-12-28T22:45:01.161Z","lastUpdated":"2019-04-01T19:01:03.744Z"}
